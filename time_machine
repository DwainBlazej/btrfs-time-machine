#!/usr/bin/env ruby
require 'date'
require 'time'
require 'yaml'

VER='0.4'

cfg = YAML.load_file(File.dirname(__FILE__)+"/config.yml")
@sources = YAML.load_file(File.dirname(__FILE__)+"/sources.yml")
@dest_device_uuid = cfg['dest_device_uuid']
@backup_mount_point = cfg['backup_mount_point']
@log_file = cfg['log_file']
@device = `blkid | grep '#{cfg['dst_device_uuid']}'`.split(':').first
@snapshot_dir = "#{@backup_mount_point}/snapshots"
@snapshot_max_age = cfg['snapshot_max_age']

@rsync_options = cfg['rsync_options']

def log(message)
  date = Time.now.asctime

  message.each_line do |line|
    log = File.open(@log_file, 'a')
    log.puts "#{date} BTRFS Time Machine: #{message}"
    log.close
  end
end

def mount(device,mount_point) 
  raise "You did not provide me with a device and mount point." unless device && mount_point
  unless is_mounted?(device,mount_point) then 
    log "Mounting #{device} to #{mount_point}"
    `sudo mount #{device} #{mount_point}` 
  end
  raise "Could not mount #{@device} to #{@backup_mount_point}" unless $?.success?
  $?.success?
end

def remount_as(option,device,mount_point)
  raise "I don't have a mount option, device and mount point." unless option && device && mount_point
  raise "Cannot remount because #{mount_point} is not mounted" unless is_mounted?(device,mount_point)
  log "Remounting #{mount_point} as #{option}"
  `sudo mount -o remount,#{option} #{device} #{mount_point}`
  raise "mount #{device} as #{option} failed" unless $?.success?
  $?.success?
end

def is_mounted?(device,mount_point) 
  raise "is_mounted says: You did not provide me with a device and mount point." unless device && mount_point
  File.open('/proc/mounts', 'r').each_line do |line|
    break true if line.include? mount_point
  end
end

def is_btrfs_subvolume?(volume,subvolume)
  raise "is_btrfs_subvolume says: I need a volume and subvolume to check." unless volume && subvolume

  unless `sudo btrfs subvolume list #{volume}`.include? 'latest' then
    raise "You must create a subvolume at #{volume}/#{subvolume}. Try running `btrfs subvolume create #{volume}/#{subvolume}`."
    return false 
  end

  true
end

def command_path(command)
  cmd_path=`which #{command}`.strip
  raise "#{command}: command not found" if cmd_path.empty?
  cmd_path
end

def rsync
  failures = []
  @sources.each do |src_data|
    src = src_data['source']
    dst = File.expand_path("#{@backup_mount_point}/latest/#{src}")
    rsync = command_path('rsync')
    rsync_opts = '-av --numeric-ids --sparse --delete --delete-excluded --human-readable'

    if src_data.key? 'exclusions' then
      src_data['exclusions'].each do |exclusion|
        exclusion.gsub!(/^\.\//, '')                  # drop off the ./ because rsync doesn't like em.
        rsync_opts += " --exclude '#{exclusion}'"
      end
    end

    raise "rsync says: I need a source and destination" unless src && dst

    `sudo mkdir -p #{dst}`
    raise "Could not create #{dst} directory" unless $?.success?

    # start the backup
    log "Starting the backup."
    `sudo #{rsync} #{rsync_opts} #{src}/ #{dst} >> #{@log_file} 2>&1` # src needs a trailing slash on dir or it'll go in wrong dir.
    failures.push push unless $?.success?
  end
  failures.include? true 
end

def btrfs_snapshot
  date = Time.now.strftime("%Y-%m-%d %H:%M:%S")
  
  `sudo mkdir -p #{@snapshot_dir}`

  log "Creating file system snapshot."
  raise "A snapshot by that name already exists" if File.directory?("#{@snapshot_dir}/#{date}")
  `sudo btrfs subvolume snapshot #{@backup_mount_point}/latest '#{@snapshot_dir}/#{date}' >> #{@log_file} 2>&1`        # TODO: make logging better
  $?.success?
end

def btrfs_delete_snapshot(date)
  log "deleting snapshot from #{date}"
  `sudo btrfs subvolume delete '#{@snapshot_dir}/#{date}' >> #{@log_file} 2>&1`
end

def btrfs_snapshot_rotate
  snapshots = Dir.entries(@snapshot_dir) 
  snapshots.delete ".."
  snapshots.delete "."

  snapshots.each do |snapshot|
    btrfs_delete_snapshot snapshot if Time.parse(snapshot) < Time.now - (@snapshot_max_age * 3600)
  end
end

log "BTRFS time machine version #{VER} started."

# mount the backup filesystem
mount @device, @backup_mount_point

# backup filesystem needs to be btrfs for snapshots.
is_btrfs_subvolume? @backup_mount_point, "latest"

remount_as "rw", @device, @backup_mount_point

rsync

btrfs_snapshot
btrfs_snapshot_rotate
remount_as "ro", @device, @backup_mount_point

log "Finished Successfully!"
