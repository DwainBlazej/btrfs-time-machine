#!/usr/bin/env ruby
require 'optparse'
require 'date'
require 'time'
require 'yaml'
require 'fileutils'

VER='0.4'

### SETUP THE COMMAND LINE OPTIONS ###############################################
options = {}
optparse = OptionParser.new do|opts|
  # Set a banner, displayed at the top
  # of the help screen.
  opts.banner = "Usage: #{__FILE__} [options]"

  # Define the options, and what they do
  options[:config] = nil
  opts.on( '-c', '--config FILE', 'Config file to use.' ) do|file|
    options[:config] = file
  end

  opts.on( '-h', '--help', 'Display this screen' ) do
    puts opts
    exit
  end

  options[:sources] = nil
  opts.on( '-s', '--sources FILE', 'Sources file to use.' ) do|file|
    options[:sources] = file
  end

  #options[:verbose] = false
  #opts.on( '-v', '--verbose', 'Output more information' ) do
  #  options[:verbose] = true
  #end
end

optparse.parse!

#VERBOSE = options[:verbose]
CONFIG = options[:config] ? options[:config] : File.dirname(__FILE__)+"/config.yml"
SOURCES = options[:sources] ? options[:sources] : File.dirname(__FILE__)+"/sources.yml"

#############################################################################################

raise "Config file: `#{CONFIG}' could not be found" unless File.exist? CONFIG
raise "Sources file: `#{SOURCES}' could not be found" unless File.exist? SOURCES

cfg = YAML.load_file(CONFIG)
@sources = YAML.load_file(SOURCES)
@dest_device_uuid = cfg['dest_device_uuid']
@backup_mount_point = cfg['backup_mount_point']
@log_file = cfg['log_file']
@device = `blkid | grep '#{cfg['dest_device_uuid']}'`.split(':').first
@snapshot_dir = "#{@backup_mount_point}/snapshots"
@snapshot_max_age = cfg['snapshot_max_age']
@lock_file = cfg['lock_file']

@rsync_options = cfg['rsync_options']

def lock()  FileUtils.touch @lock_file end
def unlock() FileUtils.rm @lock_file end
def locked?() File.exist? @lock_file end

def log(message)
  date = Time.now.asctime

  message.each_line do |line|
    log = File.open(@log_file, 'a')
    log.puts "#{date} BTRFS Time Machine: #{message}"
    log.close
  end
end

def mount(device,mount_point)
  raise "You did not provide me with a device and mount point." unless device && mount_point
  unless is_mounted?(device,mount_point) then
    log "Mounting #{device} to #{mount_point}"
    `sudo mount #{device} #{mount_point}`
  end
  raise "Could not mount #{@device} to #{@backup_mount_point}" unless $?.success?
  $?.success?
end

def remount_as(option,device,mount_point)
  raise "I don't have a mount option, device and mount point." unless option && device && mount_point
  raise "Cannot remount because #{mount_point} is not mounted" unless is_mounted?(device,mount_point)
  log "Remounting #{mount_point} as #{option}"
  `sudo mount -o remount,#{option} #{device} #{mount_point}`
  raise "mount #{device} as #{option} failed" unless $?.success?
  $?.success?
end

def is_mounted?(device,mount_point)
  raise "is_mounted says: You did not provide me with a device and mount point." unless device && mount_point
  found = false
  File.open('/proc/mounts', 'r').each_line do |line|
    found = true if line.include? mount_point
  end
  found
end

def is_btrfs_subvolume?(volume,subvolume)
  # WARNING:
  # Btrfs v0.19 (at least) has a bug where it will not always display all of
  # the subvolumes. This breaks this method and will prevent backups if
  # 'latest' cannot be found in the list. But it is getting fixed.
  # http://www.spinics.net/lists/linux-btrfs/msg07605.html

  raise "is_btrfs_subvolume says: I need a volume and subvolume to check." unless volume && subvolume

  unless `sudo btrfs subvolume list #{volume}`.include? 'latest' then
    raise "You must create a subvolume at #{volume}/#{subvolume}. Try running `btrfs subvolume create #{volume}/#{subvolume}`."
    return false
  end

  true
end

def command_path(command)
  cmd_path=`which #{command}`.strip
  raise "#{command}: command not found" if cmd_path.empty?
  cmd_path
end

def rsync
  failures = []
  @sources.each do |src_data|
    src = src_data['source']
    dst = File.expand_path("#{@backup_mount_point}/latest/#{src}")
    rsync = command_path('rsync')
    rsync_opts = '-av --numeric-ids --delete --delete-excluded --human-readable --inplace'

    if src_data.key? 'exclusions' then
      src_data['exclusions'].each do |exclusion|
        exclusion.gsub!(/^\.\//, '')                  # drop off the ./ because rsync doesn't like em.
        rsync_opts += " --exclude '#{exclusion}'"
      end
    end

    raise "rsync says: I need a source and destination" unless src && dst

    `sudo mkdir -p #{dst}`
    raise "Could not create #{dst} directory" unless $?.success?

    # start the backup
    log "Starting the backup."
    `sudo #{rsync} #{rsync_opts} #{src}/ #{dst} >> #{@log_file} 2>&1` # src needs a trailing slash on dir or it'll go in wrong dir.
    failures.push true unless $?.success?
  end
  failures.include? true
end

def btrfs_snapshot
  date = Time.now.strftime("%Y-%m-%d %H:%M:%S")

  `sudo mkdir -p #{@snapshot_dir}`

  log "Creating file system snapshot."
  raise "A snapshot by that name already exists" if File.directory?("#{@snapshot_dir}/#{date}")
  `sudo btrfs subvolume snapshot #{@backup_mount_point}/latest '#{@snapshot_dir}/#{date}' >> #{@log_file} 2>&1`        # TODO: make logging better
  $?.success?
end

def btrfs_delete_snapshot(date)
  log "deleting snapshot from #{date}"
  `sudo btrfs subvolume delete '#{@snapshot_dir}/#{date}' >> #{@log_file} 2>&1`
end

def btrfs_snapshot_rotate
  snapshots = Dir.entries(@snapshot_dir)
  snapshots.delete ".."
  snapshots.delete "."

  snapshots.each do |snapshot|
    btrfs_delete_snapshot snapshot if Time.parse(snapshot) < Time.now - (@snapshot_max_age * 3600)
  end
end

raise "It seems another backup is still running, or previous backup did not complete. If you are sure that there are no backups currently running then try deleting the lockfile at `#{@lockfile}'." if locked?

lock
log "BTRFS time machine version #{VER} started."

# scan disks for btrfs
`sudo btrfsctl -a >> #{@log_file} 2>&1`

# mount the backup filesystem
mount @device, @backup_mount_point

# backup filesystem needs to be btrfs for snapshots.
is_btrfs_subvolume? @backup_mount_point, "latest"

remount_as "rw", @device, @backup_mount_point

rsync

btrfs_snapshot
btrfs_snapshot_rotate
remount_as "ro", @device, @backup_mount_point

log "Finished Successfully!"
unlock
